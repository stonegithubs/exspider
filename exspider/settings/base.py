#! /usr/bin/python
# -*- coding:utf-8 -*-
# @zhuchen    : 2019-03-04 16:08

"""
Django settings for exspider project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from kombu import Queue, Exchange

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=ep6op2wmth3!-yp3uq+te%x&n@syp%r42rx9ay)x)8jv+uf^)'

# SECURITY WARNING: don't run with debug turned on in production!
IS_DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'exspider',
    'dispatcher',
    'spider',
    'storekeeper',
    'data_analysis',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'exspider.urls'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s]: %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {
            'format': '%(name)s: %(levelname)s|%(asctime)s|%(module)s|%(message)s'
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '/opt/logs/exspider.log',
            'when': 'MIDNIGHT',
            'backupCount': 7,
            'encoding': 'utf8',
            'interval': 1,  # 间隔
            'formatter': 'verbose',
        },
        'spider': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '/opt/logs/exspider_spider.log',
            'when': 'MIDNIGHT',
            'backupCount': 7,
            'encoding': 'utf8',
            'interval': 1,  # 间隔
            'formatter': 'verbose',
        },
        'error': {
            'level': 'ERROR',
            'formatter': 'verbose',  # 使用哪种formatters日志格式
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'rsyslog': {
            'level': 'INFO',
            'class': 'logging.handlers.SysLogHandler',
            'formatter': 'simple',
            'facility': 'local6',
            'address': '/dev/log',
        },
    },

    'loggers': {
        'django.request': {
            'handlers': ['console', 'null'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'error': {
            'handlers': ['error', ],
            'level': 'ERROR',
            'propagate': True,
        },
        'exspider': {
            'handlers': ['console', 'default'],
            'level': 'DEBUG',
        },
        'spider': {
            'handlers': ['console', 'spider'],
            'level': 'DEBUG',
        },
        'storekeeper': {
            'handlers': ['console', 'default'],
            'level': 'DEBUG',
        },
        'c21api_dev': {  # 开发环境elk日志logger
            'handlers': ['rsyslog', ],
            'level': 'INFO',
            'propagate': False,
        },
        'c21api_test': {  # 测试环境elk日志logger
            'handlers': ['rsyslog', ],
            'level': 'INFO',
            'propagate': False,
        },
        'c21api_staging': {  # 预上线环境elk日志logger
            'handlers': ['rsyslog', ],
            'level': 'INFO',
            'propagate': False,
        },
        'c21api_prod': {  # 测试环境elk日志logger
            'handlers': ['rsyslog', ],
            'level': 'INFO',
            'propagate': False,
        }
    },
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'exspider.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
#
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

RESPONSE_FORMAT = {
    "data": {},
    "exec_time": "",
    "server_time": 0,
    "server": "python"
}

# email settings
EMAIL_CONF = {
    'user': '',
    'pw': '',
    'SMTPSVR': 'smtp.exmail.qq.com',
    'PORT': 465
}

RECIVER_EMAIL_LIST = [
]

# 编辑大人们的邮箱啊
EDITOR_EMAIL_LIST = [
]

# websocket settings
PING_PONG_SECONDS = 50

BASE_WS_TYPE_TRADE = 'trade'

BASE_WS_TYPE_KLINE = 'kline'

BASE_WS_TYPE_BURST = 'burst'

MESSAGE_SEPERATOR = chr(30)

MESSAGE_PART_SEPERATOR = chr(31)

STOREKEEPER_WS_CONF = {
    'host': 'localhost',
    'port': '8765'
}

STOREKEEPER_WS_URI = f'ws://{STOREKEEPER_WS_CONF["host"]}:{STOREKEEPER_WS_CONF["port"]}'


# db settings
SYMBOL_AUTO_STOP_TMS = 20 * 60  # 20分钟 未更新状态的自动 重新订阅

# 查找新的symbol 每6小时
CHECK_NEW_SYMBOL_TMS = 6 * 60 * 60

# aicoin
BASE_AI_COIN_EXCHANGE_ID = 'aicoin'

# 校验trade 每 30分钟校验一次trade
CHECK_TRADES_TMS = 30 * 60
# 校验kline 每3小时检验一次
CHECK_KLINES_TMS = 3 * 60 * 60
# 每5分钟 生成csv
WRITE_CSV_TMS = 5 * 60
# 每1分钟 生成csv
WRITE_TRADE_CSV_TMS = 60

# 监控间隔时间
CARE_INTERVAL_TIME = 5

PROXY = None


# ============================ redis settings ========================= start

LOCAL_REDIS_CONF = {
    "host": "redis",
    "port": 6379,
    "db": 0,
}


# 生产 redis settings
PROD_REDIS_CONF = {
    "host": "redis",
    "port": 6379,
    "db": 0,
}

# 交易所状态
EXCHANGE_STATUS_KEY_MAP = {
    BASE_WS_TYPE_TRADE: 'hash:exchange_status',
    BASE_WS_TYPE_KLINE: 'hash:exchange_kline_status'
}
# 交易所爬虫状态
SPIDER_STATUS_KEY_MAP = {
    BASE_WS_TYPE_TRADE: 'hash:{}_spiders_status',
    BASE_WS_TYPE_KLINE: 'hash:{}_kline_spiders_status'
}
# 交易所交易对状态
SYMBOL_STATUS_KEY_MAP = {
    BASE_WS_TYPE_TRADE: 'hash:{}_symbols_status',
    BASE_WS_TYPE_KLINE: 'hash:{}_kline_symbols_status'
}

# 发送 生成trade csv 指令
PENDING_CSV_EXCHANGE = 'list:pending_csv_exchange'
# 发送 kline csv 指令
PENDING_KLINE_CSV_EXCHANGE = 'list:pending_kline_csv_exchange'
PENDING_CSV_EXCHANGE_KEY_MAP = {
    BASE_WS_TYPE_TRADE: PENDING_CSV_EXCHANGE,
    BASE_WS_TYPE_KLINE: PENDING_KLINE_CSV_EXCHANGE
}

# 交易所所有trade list
EXCHANGE_SYMBOL_TRADE_KEY = 'list:{}_{}_trades'
# 交易所kline list
EXCHANGE_SYMBOL_KLINE_KEY = 'list:{}_{}_klines'
# 缓存 map
EXCHANGE_SYMBOL_CACHE_KEY_MAP = {
    BASE_WS_TYPE_TRADE: EXCHANGE_SYMBOL_TRADE_KEY,
    BASE_WS_TYPE_KLINE: EXCHANGE_SYMBOL_KLINE_KEY
}

# 有用户订阅时push trade 一份到此list # TODO 打到 mq
EXCHANGE_SYMBOL_OHLCV_TRADE_KEY = 'list:{}_{}_ohlcv_trades'

# 交易所task 锁
EXCHANGE_TASK_LOCK_KEY = 'string:{}_task_lock'

# 用于记录 交易所 所有交易对最后一条ohlcv
EXCHANGE_LAST_OHLCV_KEY = 'hash:{}_last_ohlcv'

# 用户订阅 缓存
USER_SUB_EXCHANGE_SYMBOL_KEY = 'hash:user_sub_pair'

# 订阅过期时间
USER_SUB_EX = 60 * 60

# aicoin symbol 缓存
AICOIN_PAIR_CACHE_KEY = 'hash:aicoin_pair_cache'

# 导入1分钟csv的最后修改时间
IMPORT_DATA_LAST_MTIME_KEY = 'hash:import_data_last_mtime'

# 价格预警 push 绑定的交易对
COIN_PUSH_FROM_PAIR_KEY = 'hash:coin_push_from_pair'

# RESTful kline 服务器, 交易所, 交易对绑定 按照总数量
SPIDER_EXCHANGE_SYMBOLS_KEY = 'hash:{}_exchange_symbols_cache'

# 服务器域名缓存
SPIDER_HOST_MAP_KEY = 'hash:spider_host_map'

# 交易对 精度缓存
PAIR_PRECISION_KEY = 'hash:pair_precision'

# csv kline 入库记录文件上次读取位置
PAIR_READ_LINE_NO_KEY = 'hash:pair_read_line_no'
# ============================ redis settings ========================= end


# ============================ CSV settings ========================= start
TRADE_CSV_HEADERS = ['timestamp', 'id', 'type', 'price', 'amount']

ONE_TIME_SAVE_COUNT = 50000

# 每个csv 文件大小10M
CSV_SIZE = 10
# trade csv
EXCHANGE_SYMBOL_CSV_PATH = '/opt/db/{exchange_id}/{symbol}/csv/{tms}.csv'

AICOIN_EXCHANGE_SYMBOL_CSV_PATH = '/opt/db/aicoin/{exchange_id}/{symbol}/csv/{tms}.csv'

# kline csv
EXCHANGE_KLINE_SYMBOL_CSV_PATH = '/opt/db/{exchange_id}/{symbol}/kline_csv/{tms}.csv'

AICOIN_EXCHANGE_KLINE_SYMBOL_CSV_PATH = '/opt/db/aicoin/{exchange_id}/{symbol}/kline_csv/{tms}.csv'

# burst csv
EXCHANGE_BURST_SYMBOL_CSV_PATH = '/opt/db/{exchange_id}/{symbol}/burst_csv/{tms}.csv'

# csv 文件路径
CSV_PATH_MAP = {
    BASE_WS_TYPE_TRADE: {
        'exchange': EXCHANGE_SYMBOL_CSV_PATH,
        BASE_AI_COIN_EXCHANGE_ID: AICOIN_EXCHANGE_SYMBOL_CSV_PATH
    },
    BASE_WS_TYPE_KLINE: {
        'exchange': EXCHANGE_KLINE_SYMBOL_CSV_PATH,
        BASE_AI_COIN_EXCHANGE_ID: AICOIN_EXCHANGE_KLINE_SYMBOL_CSV_PATH
    },
    BASE_WS_TYPE_BURST: {
        'exchange': EXCHANGE_BURST_SYMBOL_CSV_PATH
    }
}
# ============================ CSV settings ========================= end


# ============================ celery settings ========================= start
BROKER_URL = 'amqp://guest:guest@rabbitmq:5672//'  # 使用RabbitMQ作为消息代理
CELERY_RESULT_BACKEND = 'redis://redis:6379/1'  # 把任务结果存在了Redis
RABBIT_MQ_URL = 'amqp://guest:guest@rabbitmq:5672//'
# 任务path
CELERY_IMPORTS = ('storekeeper.tasks',)

CELERY_TASK_SERIALIZER = 'msgpack'  # 任务序列化和反序列化使用msgpack方案

CELERY_RESULT_SERIALIZER = 'json'  # 读取任务结果一般性能要求不高，所以使用了可读性更好的JSON

CELERY_EVENT_QUEUE_TTL = 60 * 60  # 过期时间

CELERY_ACCEPT_CONTENT = ['json', 'msgpack', 'pickle']  # 指定接受的内容类型

CELERY_ACKS_LATE = False  # 在任务执行之前就ack，而不是任务执行完毕才ack

CELERYD_PREFETCH_MULTIPLIER = 10  # 每个worker预取message的数量，默认值为4

CELERYD_CONCURRENCY = 6  # 执行任务的并发工作进程/线程。

CELERYD_MAX_TASKS_PER_CHILD = 50  # 每个worker 执行多少个任务死掉

CELERYD_FORCE_EXECV = True

CELERY_IGNORE_RESULT = True  # 不发送结果

CELERY_DEFAULT_QUEUE = 'default'

CELERY_CREATE_MISSING_QUEUES = True  # 没有queue 自动创建

CELERY_TIMEZONE = 'Asia/Shanghai'

CELERY_ENABLE_UTC = False

# 队列
CELERY_QUEUES = (
    Queue('default', Exchange('exspider', type='direct'), routing_key='exspider'),
)

CELERY_ROUTES = {
    'storekeeper.tasks.add': {
        'queue': 'default',
        'routing_key': 'default'
    },
}
# ============================ celery settings ========================= end
# }


# 配置哪些交易所提供了kline订阅
PROVIDED_KLINE_EXCHANGES = [
    'binance', 'huobipro', 'okex', 'bitfinex', 'gateio', 'bitmex', 'hotbit', 'bibox', 'hitbtc', 'kraken', 'mxc'
]

# ============================ Push and php settings ========================= start

PAIR_JUMP_URL = 'hold://open_pair_detail?symbol={symbol}&exchange_id={exchange_id}&pair_id={pair_id}&hasOhlcv={hasOhlcv}&coin_id={coin_id}&is_pair_detail=1'

# 暴涨暴跌-报警百分比 基础比, 没有取到 取此值
HIGH_BOOM_PLUNGE_ALARM_PERCENT = 2

# 小币种 报警阈值为10%
SMALL_COIN_BOOM_ALARM_PCT = 10

# 实时kline如果10分钟不更新 就切换到备用源
CHANGE_PAIR_PRICE_TMS = 10 * 60

# 直接Push还是待审核的百分比
IS_PUSH_OR_CHECK_PCT = 20

# 价格异动 最大窗口宽度（分钟）
PERIOD_PRICE_CHECK = 5

# 价格异动 最大窗口宽度（分钟）
SMALL_PERIOD_PRICE_CHECK = 60

# 价格异动 合并计算窗口宽度 (分钟)
MERGE_PERIOD_PRICE_CHECK = 30

# 价格异动 小币种 合并计算窗口宽度 (分钟)
SMALL_MERGE_PERIOD_PRICE_CHECK = 60

# 价格异动 滑动窗口宽度（秒）
WINDOW_DURATION = PERIOD_PRICE_CHECK * 60

SMALL_WINDOW_DURATION = SMALL_PERIOD_PRICE_CHECK * 60

# 价格突破整数 合并期长(分钟)
PRICE_PASS_WINDOW = 4 * 60

# 整数关口 500
PRICE_PASS_BASE_INTEGER = 500

# 整数关口 基础计算
PAIR_PASS_PRICE_BASE_MAP = {
    'BTC': 100,
    'ETH': 50
}

# redis key 与php维护的消息通知队列
PHP_NOTICE_CONNECT = {
    'HOST': '',
    'PORT': 9503,
    'BUFSIZE': 1024
}

PHP_NOTICE_METHOD = {
    # 交易对价格异动(app)
    "pair_alarm": {
        "module": "JpushArticleJobs",
        "method": "priceAlarmPushAllJobs"
    },
    "fenxibao": {
        "module": "UserFollowJobs",
        "method": "FenXiBaoExchangePairId"
    }
}

# 内部服务API
C21_CANDLES_API = 'http://:8010'

EXCHANGE_NAME_MAP = {
    'binance': {
        'name': '币安',
        'pairs': {}
    },
    'huobipro': {
        'name': '火币',
        'pairs': {}
    },
    'okex': {
        'name': 'OKEX',
        'pairs': {}
    },
}

# ------------------------------------- 以下 价格预警相关的配置 请前往c21_api 项目进行初始化 ----------------------------
# 目的: 不停机下 重置基础数据
# CMD: python manage.py auto_set_price_alarm_cache --settings=c21_api.settings.local_dev

# 首批 上架 币种
PRICE_ALARM_COIN_KEY = 'string:price_alarm_coin'
PRICE_ALARM_COIN_LIST = [
    'BTC', 'ETH', 'XRP', 'BCH', 'BSV', 'LTC', 'EOS', 'BNB', 'XLM', 'ADA', 'TRX', 'XMR', 'DASH', 'IOTA', 'HT',
    'ONT', 'ETC', 'NEO', 'OKB', 'IOST',
    # 'BCHABC',
]

# 整数关口的币种
PASS_PRICE_COIN_KEY = 'string:pass_price_coin'
PASS_PRICE_COIN_LIST = [
    'BTC'
]

# 币种价格 异动 数据源
PAIR_PRICE_SOURCE_CACHE_KEY = 'hash:pair_price_source'
PAIR_PRICE_SOURCE_CACHE = {
    'BTC': (('btcusdt:binance', 3), ('btcusdt:huobipro', 2), ('btcusdt:okex', 1))
}

# 币种价格 异动 触发百分比
PAIR_ALARM_PUSH_PERCENT_KEY = 'hash:pair_alarm_push_percent'
PLUNGE_ALARM_PERCENT_MAP = {
    'BTC': 1,
    'ETH': 2.0,
    'XRP': 2.0,
    'BCH': 2.5,
    'LTC': 2.0,
    'EOS': 2.0,
    'BNB': 2.0,
    'XLM': 2.0,
    'ADA': 2.5,
    'TRX': 2.5,
    'XMR': 2.0,
    'DASH': 2.0,
    'IOTA': 2.0,
    'HT': 2.5,
    'ONT': 2.0,
    'ETC': 2.5,
    'NEO': 2.0,
    'OKB': 2.0,
    'IOST': 2.5,
    'BSV': 2.5,
    # 'BCHABC': 2.5
}

SPIDER_HOST_MAP = {
    'spider1': '47.240.24.174',
    'spider2': '149.129.90.193',
    'spider3': '47.240.28.97',
    'global_test': '127.0.0.1',
    'global': '172.17.144.108'
}

# 大额连上转账推送
WHALE_ALERT_TOKEN_MAP = {
    "BTC": 301,
    "EOS": 386,
    "ETH": 617,
    "NEO": 541,
    "TRX": 1596,
    "XLM": 1163,
    "XRP": 2056,
}

# 链上大额转账 额度监控 USD
WHALE_ALERT_USD_AMOUNT = 50000000

# -------------------------------------------- 价格预警相关的配置 end -------------------------------------


# ============================ Push and php settings ========================= end

MARKETS_SERVER_RESTFUL_URL = 'https://'

# ohlcv 连接池 最大数量
PG_MAX_SIZE = 2

MYSQL_MAX_SIZE = 100


# 环境判断
APP_TYPE = 'TEST'

APP_NAME = 'exspider'